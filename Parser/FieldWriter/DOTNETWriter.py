"""
Zachary Cook

Writer for the C# / .NET SDK.
"""

from Parser.FieldWriter import FieldWriter

FILE_HEADER = "/*\n" \
    " * Fields for XML requests and responses. Refer to the XML\n" \
    " * reference guides for further documentation.\n" \
    " * \n" \
    " * Generated by an external tool. Be careful if modifying.\n" \
    " * Repo: https://github.com/zxc8027/cnp-xml-fields-generator\n" \
    " */\n" \
    "\n" \
    "using System;\n" \
    "using Cnp.Sdk.VersionedXML;\n" \
    "\n" \
    "namespace Cnp.Sdk\n" \
    "{\n" \

OBJECT_TRANSLATIONS = {
    "date": "DateTime",
    "dateTime": "DateTime",
    "integer": "int",
    "decimal": "string",
    "boolean": "bool",
}

PRIMITIVE_TYPES = [
    "int","short","long",
    "float","double",
    "bool",
]



"""
Creates a declaration header.
"""
def createDeclarationHeader(text):
    return "\t/*\n" \
           "\t * " + text + "\n" \
           "\t */\n"

"""
Class representing a .NET writer.
"""
class DOTNETWriter(FieldWriter.FieldWriter):
    """
    Creates a .NET writer object.
    """
    def __init__(self,xsd,version,outputDirectory):
        super().__init__(xsd,version,outputDirectory)

    """
    Returns the display name of the writer.
    """
    def getDisplayName(self):
        return "C# (.NET)"

    """
    Returns the file name of the writer.
    """
    def getFileName(self):
        return "XmlFields.cs"

    """
    Returns the removed version for a version.
    """
    def getRemovedVersion(self,version):
        return self.versions[self.versions.index(version) + 1]

    """
    Creates an attribute.
    """
    def createAttribute(self,attributeName,name):
        attribute = "[" + attributeName + "(Name = \"" + name.name + "\""
        if name.start != self.versions[0]:
            attribute += ",FirstVersion = \"" + name.start + "\""
        if name.end != self.versions[len(self.versions) - 1]:
            attribute += ",RemovedVersion = \"" + self.getRemovedVersion(name.end) + "\""

        return attribute + "]"

    """
    Creates a string for the class name.
    """
    def getClassString(self,name):
        # Change the name if it isn't valid for C#.
        if name in OBJECT_TRANSLATIONS.keys():
            name = OBJECT_TRANSLATIONS[name]

        # Add a question mark (nullable) if it is an enum or primitive type.
        if name in self.xsd.enums.keys() or name in PRIMITIVE_TYPES:
            name += "?"

        # Return the name.
        return name

    """
    Returns the file contents as a string.
    """
    def getContents(self):
        generatedFile = FILE_HEADER

        # Add the enums.
        generatedFile += createDeclarationHeader("Enum declarations.")
        for enumName in self.xsd.enums.keys():
            enum = self.xsd.enums[enumName]
            generatedFile += "\tpublic enum " + enumName + "\n\t{\n"

            # Add the enum items.
            for enumItemName in enum.childItems.keys():
                enumItem = enum.childItems[enumItemName]

                # Change the name to allow it to be stored.
                displayName = enumItemName.replace(" ","")
                if enumItemName == "" or enumItemName[0:1].isdigit():
                    displayName = "item" + enumItemName

                # Create the attributes.
                for name in enumItem.names:
                    generatedFile += "\t\t" + self.createAttribute("XMLEnum",name) + "]\n"

                # Add the enum item.
                generatedFile += "\t\t" + displayName + ",\n\n"

            generatedFile += "\t}\n\n"

        # Add the classes.
        generatedFile += "\n\n" + createDeclarationHeader("Type declarations.")
        for className in self.xsd.simpleTypes.keys():
            type = self.xsd.simpleTypes[className]

            # Write the attributes.
            for name in type.names:
                generatedFile += "\t" + self.createAttribute("XMLElement", name) + "\n"

            # Write the class name.
            base = type.type
            if base is None:
                base = "VersionedXMLElement"
            generatedFile += "\tpublic class " + className + " : " + base + "\n\t{\n"

            generatedFile += "\t}\n\n"

        for className in self.xsd.complexTypes.keys():
            type = self.xsd.complexTypes[className]

            # Write the attributes.
            for name in type.names:
                generatedFile += "\t" + self.createAttribute("XMLElement",name) + "\n"

            # Write the class name.
            base = type.type
            if base is None:
                base = "VersionedXMLElement"
            generatedFile += "\tpublic class " + className + " : " + base + "\n\t{\n"

            # Write the properties.
            for childName in type.childItems.keys():
                child = type.childItems[childName]
                childType = self.getClassString(child.type)

                # Write the property attributes.
                for name in child.names:
                    generatedFile += "\t\t" + self.createAttribute("XML" + name.type,name) + "\n"

                # Write the property.
                generatedFile += "\t\tpublic " + childType + " " + childName + " { get; set; }\n\n"

            generatedFile += "\t}\n\n"

        # Add the classes.
        generatedFile += "\n\n" + createDeclarationHeader("Element declarations.")
        for className in self.xsd.elements.keys():
            if className not in self.xsd.simpleTypes.keys() and className not in self.xsd.complexTypes.keys():
                type = self.xsd.elements[className]

                # Write the attributes.
                for name in type.names:
                    generatedFile += "\t" + self.createAttribute("XMLElement", name) + "\n"

                # Write the class name.
                base = type.type
                if base is None:
                    base = "VersionedXMLElement"
                generatedFile += "\tpublic class " + className + " : " + base + "\n\t{\n"

                generatedFile += "\t}\n\n"

        # Return the file.
        return generatedFile + "}"