"""
Zachary Cook

Writer for the C# / .NET SDK.
"""

from Parser.FieldWriter import FieldWriter

FILE_HEADER = "/*\n" \
    " * Fields for XML requests and responses. Refer to the XML\n" \
    " * reference guides for further documentation.\n" \
    " * \n" \
    " * Generated by an external tool. Be careful if modifying.\n" \
    " * Repo: https://github.com/zxc8027/cnp-xml-fields-generator\n" \
    " */\n" \
    "\n" \
    "using Cnp.Sdk.VersionedXML;\n" \
    "\n" \
    "namespace Cnp.Sdk\n" \
    "{\n" \



"""
Creates a declaration header.
"""
def createDeclarationHeader(text):
    return "\t/*\n" \
           "\t * " + text + "\n" \
           "\t */\n"

"""
Class representing a .NET writer.
"""
class DOTNETWriter(FieldWriter.FieldWriter):
    """
    Creates a .NET writer object.
    """
    def __init__(self,xsd,version,outputDirectory):
        super().__init__(xsd,version,outputDirectory)

    """
    Returns the display name of the writer.
    """
    def getDisplayName(self):
        return "C# (.NET)"

    """
    Returns the file name of the writer.
    """
    def getFileName(self):
        return "XmlFields.cs"

    """
    Returns the file contents as a string.
    """
    def getContents(self):
        generatedFile = FILE_HEADER

        # Add the enums.
        generatedFile += createDeclarationHeader("Enum declarations.")
        for enumName in self.xsd.enums.keys():
            enum = self.xsd.enums[enumName]
            generatedFile += "\tpublic enum " + enumName + "\n\t{\n"

            generatedFile += "\t}\n\n"

        # Add the classes.
        generatedFile += "\n\n" + createDeclarationHeader("Type declarations.")
        for className in self.xsd.simpleTypes.keys():
            type = self.xsd.simpleTypes[className]
            base = type.type
            if base is None:
                base = "VersionedXMLElement"
            generatedFile += "\tpublic class2 " + className + " : " + base + "\n\t{\n"

            generatedFile += "\t}\n\n"

        for className in self.xsd.complexTypes.keys():
            type = self.xsd.complexTypes[className]
            base = type.type
            if base is None:
                base = "VersionedXMLElement"
            generatedFile += "\tpublic class " + className + " : " + base + "\n\t{\n"

            generatedFile += "\t}\n\n"

        # Add the classes.
        generatedFile += "\n\n" + createDeclarationHeader("Element declarations.")
        for className in self.xsd.elements.keys():
            if className not in self.xsd.simpleTypes.keys() and className not in self.xsd.complexTypes.keys():
                type = self.xsd.elements[className]
                base = type.type
                if base is None:
                    base = "VersionedXMLElement"
                generatedFile += "\tpublic class " + className + " : " + base + "\n\t{\n"

                generatedFile += "\t}\n\n"

        # Return the file.
        return generatedFile + "}"